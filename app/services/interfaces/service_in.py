from typing import List
from abc import ABC, abstractmethod

from app.repository.interfaces.repository_in import IRepository
from app.schemas.joke import JokeData
from app.models.joke import Joke


class IService(ABC):

    def __init__(self, repository: IRepository):
        self.respository = repository

    @abstractmethod
    async def get_random_joke(self) -> str:
        """Get a random joke by choosing one from
        'jokes_resources' dict.

        Returns:
            -   JokePhrase: A random joke fetched from choosed joke resource.
        """

    @abstractmethod
    async def get_joke_from_resource(self, resource: str) -> str:
        """Get a joke from choosed resource. This resource
        name needs to belong to 'joker_resources' dict keys.

        If resource is not found, an exception wil raise.

        Args:
            -   resource: str = Prefered jokes resource.

        Returns:
            -   JokePhrase: A random joke fetched from provided resource.

        Exceptions:
            -   JokeResourceNotFound: This exception only raises when
            resource does not found in 'jokes_resources' dict.
        """

    @abstractmethod
    async def create_joke(self, phrase: str) -> JokeData:
        """Create a new joke and saved in database.

        Args:
            -   phrase: str = Joke phrase to be saved.

        Returns:
            -   JokeData: Joke database data.
        """

    @abstractmethod
    async def update_joke(self, joke_id: int, new_phrase: str) -> JokeData:
        """Update an already saved joke in database.

        Args:
            -   joke_id: int = Existing joke id.
            -   new_phrase: str = New phrase to replace in existing

        Returns:
            -   JokeData: Joke data with updated information.

        Exceptions:
            - (Exception, DatabaseError): Exception raised when update
            statement fails.
        """

    @abstractmethod
    async def delete_joke(self, joke_id: int):
        """Delete joke from database.

        Args:
            -   joke_id: int = Joke id generated by database.
        """

    @abstractmethod
    async def get_jokes(self) -> List[Joke]:
        """Get all saved jokes in database.

        Returns:
            -   List[Joke]: List of saved jokes.
        """

    @abstractmethod
    async def least_common_multiple(
        self,
        numbers: List[int]
    ) -> int:
        """Calculate the LCM (Least Common Multiple) of provided
        list of numbers.

        Args:
            -   numbers: List[int] = List of number to calculate LCM.

        Returns:
            -   int: LCM result.
        """

    @abstractmethod
    async def add_one_to_number(self, number: int) -> int:
        """Add 1 to provided number.

        Args:
            -   number: int = Number to add.

        Returns:
            -   int: Provided number plus one.
        """
